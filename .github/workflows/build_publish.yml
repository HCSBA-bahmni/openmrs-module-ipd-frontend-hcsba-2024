name: üèóÔ∏è Build and Publish

on:
  push:
    branches:
      - main
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
    paths-ignore:
      - "**.md"
  workflow_dispatch:

jobs:
  build-publish-docker:
    name: üèóÔ∏è Pull Translations, Build & Publish Docker Image
    runs-on: ubuntu-latest
    steps:
      # Paso 1: Descargar el repositorio
      - uses: actions/checkout@v2

      # Paso 2: Instalar y configurar el cliente de Transifex
      - name: Instalar Cliente de Transifex
        run: |
          curl -o transifex.sh https://raw.githubusercontent.com/transifex/cli/master/install.sh
          bash transifex.sh
          mkdir -p $HOME/bin
          mv tx $HOME/bin/tx
        shell: bash

      - name: Configurar PATH para el cliente de Transifex
        run: echo "$HOME/bin:$PATH" >> $GITHUB_PATH

      # Paso 3: Descargar traducciones
      - name: Descargar Traducciones de Transifex
        run: |
          $HOME/bin/tx pull -l es
          ls -la public/i18n/
        env:
          TX_TOKEN: ${{ secrets.TX_TOKEN }}

      # Paso 4: Verificar traducciones descargadas
      - name: Verificar traducciones descargadas
        run: ls -la public/i18n/

      # Paso 5: Configurar versi√≥n del artefacto
      - name: Set env.ARTIFACT_VERSION
        run: |
          wget -q https://raw.githubusercontent.com/Bahmni/bahmni-infra-utils/main/setArtifactVersion.sh && chmod +x setArtifactVersion.sh
          ./setArtifactVersion.sh
          rm setArtifactVersion.sh

      # Paso 6: Configurar Node.js
      - uses: actions/setup-node@v4
        with:
          node-version: 14.x

      # Paso 7: Instalar dependencias y construir la aplicaci√≥n
      - name: üì• Install dependencies
        run: yarn install
      - name: üèóÔ∏è Build
        run: yarn build

      # Paso 8: Configurar Docker y construir la imagen
      - name: üñ•Ô∏è Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: üñ•Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: üîê Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      - name: üê≥ Docker Build and Push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: package/docker/Dockerfile
          push: true
          tags: |
            hcsba/microfrontend-ipd-hcsba-2024:${{ env.ARTIFACT_VERSION }}
            hcsba/microfrontend-ipd-hcsba-2024:latest

  trigger-workflow:
    name: üîÅ Trigger workflow to deploy to Docker env
    needs: build-publish-docker
    runs-on: ubuntu-latest
    env:
      ORG_NAME: HCSBA-bahmni
      REPOSITORY_NAME: openmrs-module-ipd-frontend-hcsba-2024
      EVENT_TYPE: bahmni-ipd-microfrontend-event
    steps:
      - name: üîß Create repository_dispatch
        run: |
          trigger_result=$(curl -s -o trigger_response.txt -w "%{http_code}" -X POST -H "Accept: application/vnd.github.v3+json" -H 'authorization: Bearer ${{ secrets.BAHMNI_PAT }}' https://api.github.com/repos/${ORG_NAME}/${REPOSITORY_NAME}/dispatches -d '{"event_type":"'"${EVENT_TYPE}"'"}')
          if [ $trigger_result == 204 ]; then
            echo "‚úÖ Trigger to $ORG_NAME/$REPOSITORY_NAME Success"
          else
            echo "‚ùå Trigger to $ORG_NAME/$REPOSITORY_NAME Failed"
            cat trigger_response.txt
            exit 1
          fi
